//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalASP
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalDBEntities : DbContext
    {
        public HospitalDBEntities()
            : base("name=HospitalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountingWork> AccountingWorks { get; set; }
        public virtual DbSet<AccShiftDuty> AccShiftDuties { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Analyze> Analyzes { get; set; }
        public virtual DbSet<DoctorDischarge> DoctorDischarges { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DrugProvider> DrugProviders { get; set; }
        public virtual DbSet<Drug> Drugs { get; set; }
        public virtual DbSet<Historyilling> Historyillings { get; set; }
        public virtual DbSet<Illing> Illings { get; set; }
        public virtual DbSet<PatientCard> PatientCards { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<Reception> Receptions { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Specification> Specifications { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
    
        public virtual int CrtAccShiftDuties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtAccShiftDuties");
        }
    
        public virtual int CrtAccWorks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtAccWorks");
        }
    
        public virtual int CrtAgencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtAgencies");
        }
    
        public virtual int CrtAnalyzes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtAnalyzes");
        }
    
        public virtual int CrtDocDischarge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtDocDischarge");
        }
    
        public virtual int CrtDoctors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtDoctors");
        }
    
        public virtual int CrtDrugProviders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtDrugProviders");
        }
    
        public virtual int CrtDrugs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtDrugs");
        }
    
        public virtual int CrtHistoryillings(Nullable<System.Guid> historyIllID)
        {
            var historyIllIDParameter = historyIllID.HasValue ?
                new ObjectParameter("HistoryIllID", historyIllID) :
                new ObjectParameter("HistoryIllID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtHistoryillings", historyIllIDParameter);
        }
    
        public virtual int CrtIllings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtIllings");
        }
    
        public virtual int CrtPatientCards()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtPatientCards");
        }
    
        public virtual int CrtPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtPatients");
        }
    
        public virtual int CrtPolicies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtPolicies");
        }
    
        public virtual int CrtReceptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtReceptions");
        }
    
        public virtual int CrtShifts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtShifts");
        }
    
        public virtual int CrtSpecifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtSpecifications");
        }
    
        public virtual int CrtVisits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrtVisits");
        }
    
        public virtual int DelAccShiftDuties(Nullable<System.Guid> accID, Nullable<System.Guid> shiftID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelAccShiftDuties", accIDParameter, shiftIDParameter);
        }
    
        public virtual int DelAccWorks(Nullable<System.Guid> accID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelAccWorks", accIDParameter);
        }
    
        public virtual int DelAgencies(Nullable<System.Guid> agID)
        {
            var agIDParameter = agID.HasValue ?
                new ObjectParameter("AgID", agID) :
                new ObjectParameter("AgID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelAgencies", agIDParameter);
        }
    
        public virtual int DelAnalyzes(Nullable<System.Guid> anID)
        {
            var anIDParameter = anID.HasValue ?
                new ObjectParameter("AnID", anID) :
                new ObjectParameter("AnID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelAnalyzes", anIDParameter);
        }
    
        public virtual int DelDocDischarge(Nullable<System.Guid> dischargeID)
        {
            var dischargeIDParameter = dischargeID.HasValue ?
                new ObjectParameter("DischargeID", dischargeID) :
                new ObjectParameter("DischargeID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDocDischarge", dischargeIDParameter);
        }
    
        public virtual int DelDoctors(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDoctors", docIDParameter);
        }
    
        public virtual int DelDrugProviders(Nullable<System.Guid> drugProviderID)
        {
            var drugProviderIDParameter = drugProviderID.HasValue ?
                new ObjectParameter("DrugProviderID", drugProviderID) :
                new ObjectParameter("DrugProviderID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDrugProviders", drugProviderIDParameter);
        }
    
        public virtual int DelDrugs(Nullable<System.Guid> drugID)
        {
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDrugs", drugIDParameter);
        }
    
        public virtual int DelHistoryillings(Nullable<System.Guid> historyIllID)
        {
            var historyIllIDParameter = historyIllID.HasValue ?
                new ObjectParameter("HistoryIllID", historyIllID) :
                new ObjectParameter("HistoryIllID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelHistoryillings", historyIllIDParameter);
        }
    
        public virtual int DelIllings(Nullable<System.Guid> illID)
        {
            var illIDParameter = illID.HasValue ?
                new ObjectParameter("IllID", illID) :
                new ObjectParameter("IllID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelIllings", illIDParameter);
        }
    
        public virtual int DelPatientCards(Nullable<System.Guid> patCardNum)
        {
            var patCardNumParameter = patCardNum.HasValue ?
                new ObjectParameter("PatCardNum", patCardNum) :
                new ObjectParameter("PatCardNum", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelPatientCards", patCardNumParameter);
        }
    
        public virtual int DelPatients(Nullable<System.Guid> patID)
        {
            var patIDParameter = patID.HasValue ?
                new ObjectParameter("PatID", patID) :
                new ObjectParameter("PatID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelPatients", patIDParameter);
        }
    
        public virtual int DelPolicies(Nullable<decimal> polID)
        {
            var polIDParameter = polID.HasValue ?
                new ObjectParameter("PolID", polID) :
                new ObjectParameter("PolID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelPolicies", polIDParameter);
        }
    
        public virtual int DelReceptions(Nullable<System.Guid> recID)
        {
            var recIDParameter = recID.HasValue ?
                new ObjectParameter("RecID", recID) :
                new ObjectParameter("RecID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelReceptions", recIDParameter);
        }
    
        public virtual int DelShifts(Nullable<System.Guid> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelShifts", shiftIDParameter);
        }
    
        public virtual int DelSpecifications(Nullable<System.Guid> specID)
        {
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelSpecifications", specIDParameter);
        }
    
        public virtual int DelVisits(Nullable<System.Guid> visitID)
        {
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelVisits", visitIDParameter);
        }
    
        public virtual int InsAccShiftDuties(Nullable<System.Guid> accID, Nullable<System.Guid> shiftID, Nullable<bool> isDutyDoc)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            var isDutyDocParameter = isDutyDoc.HasValue ?
                new ObjectParameter("IsDutyDoc", isDutyDoc) :
                new ObjectParameter("IsDutyDoc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsAccShiftDuties", accIDParameter, shiftIDParameter, isDutyDocParameter);
        }
    
        public virtual int InsAccWorks(Nullable<System.Guid> accID, Nullable<System.Guid> visitID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsAccWorks", accIDParameter, visitIDParameter);
        }
    
        public virtual int InsAgencies(string agName, Nullable<System.Guid> agID)
        {
            var agNameParameter = agName != null ?
                new ObjectParameter("AgName", agName) :
                new ObjectParameter("AgName", typeof(string));
    
            var agIDParameter = agID.HasValue ?
                new ObjectParameter("AgID", agID) :
                new ObjectParameter("AgID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsAgencies", agNameParameter, agIDParameter);
        }
    
        public virtual int InsAnalyzes(Nullable<System.Guid> anID, string anType)
        {
            var anIDParameter = anID.HasValue ?
                new ObjectParameter("AnID", anID) :
                new ObjectParameter("AnID", typeof(System.Guid));
    
            var anTypeParameter = anType != null ?
                new ObjectParameter("AnType", anType) :
                new ObjectParameter("AnType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsAnalyzes", anIDParameter, anTypeParameter);
        }
    
        public virtual int InsDocDischarge(Nullable<System.Guid> dischargeID, Nullable<System.Guid> patID, Nullable<System.Guid> drugID1, Nullable<System.Guid> drugID2, Nullable<System.Guid> drugID3)
        {
            var dischargeIDParameter = dischargeID.HasValue ?
                new ObjectParameter("DischargeID", dischargeID) :
                new ObjectParameter("DischargeID", typeof(System.Guid));
    
            var patIDParameter = patID.HasValue ?
                new ObjectParameter("PatID", patID) :
                new ObjectParameter("PatID", typeof(System.Guid));
    
            var drugID1Parameter = drugID1.HasValue ?
                new ObjectParameter("DrugID1", drugID1) :
                new ObjectParameter("DrugID1", typeof(System.Guid));
    
            var drugID2Parameter = drugID2.HasValue ?
                new ObjectParameter("DrugID2", drugID2) :
                new ObjectParameter("DrugID2", typeof(System.Guid));
    
            var drugID3Parameter = drugID3.HasValue ?
                new ObjectParameter("DrugID3", drugID3) :
                new ObjectParameter("DrugID3", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDocDischarge", dischargeIDParameter, patIDParameter, drugID1Parameter, drugID2Parameter, drugID3Parameter);
        }
    
        public virtual int InsDoctors(Nullable<System.Guid> docID, Nullable<System.Guid> specID, string docFullName, Nullable<decimal> age, Nullable<decimal> exp, Nullable<System.DateTime> birthD, Nullable<decimal> cost)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(System.Guid));
    
            var docFullNameParameter = docFullName != null ?
                new ObjectParameter("DocFullName", docFullName) :
                new ObjectParameter("DocFullName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(decimal));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("Exp", exp) :
                new ObjectParameter("Exp", typeof(decimal));
    
            var birthDParameter = birthD.HasValue ?
                new ObjectParameter("BirthD", birthD) :
                new ObjectParameter("BirthD", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDoctors", docIDParameter, specIDParameter, docFullNameParameter, ageParameter, expParameter, birthDParameter, costParameter);
        }
    
        public virtual int InsDrugProviders(Nullable<System.Guid> drugProviderID, string providerName, string providerCountry)
        {
            var drugProviderIDParameter = drugProviderID.HasValue ?
                new ObjectParameter("DrugProviderID", drugProviderID) :
                new ObjectParameter("DrugProviderID", typeof(System.Guid));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerCountryParameter = providerCountry != null ?
                new ObjectParameter("ProviderCountry", providerCountry) :
                new ObjectParameter("ProviderCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDrugProviders", drugProviderIDParameter, providerNameParameter, providerCountryParameter);
        }
    
        public virtual int InsDrugs(Nullable<System.Guid> drugID, Nullable<System.Guid> drugProviderID, string drugName, string drugPurpose, Nullable<bool> isPreAllowed)
        {
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(System.Guid));
    
            var drugProviderIDParameter = drugProviderID.HasValue ?
                new ObjectParameter("DrugProviderID", drugProviderID) :
                new ObjectParameter("DrugProviderID", typeof(System.Guid));
    
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var drugPurposeParameter = drugPurpose != null ?
                new ObjectParameter("DrugPurpose", drugPurpose) :
                new ObjectParameter("DrugPurpose", typeof(string));
    
            var isPreAllowedParameter = isPreAllowed.HasValue ?
                new ObjectParameter("IsPreAllowed", isPreAllowed) :
                new ObjectParameter("IsPreAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDrugs", drugIDParameter, drugProviderIDParameter, drugNameParameter, drugPurposeParameter, isPreAllowedParameter);
        }
    
        public virtual int InsHistoryillings(Nullable<System.Guid> historyIllID, Nullable<System.Guid> illID, Nullable<System.Guid> anID, string anRes, Nullable<System.DateTime> datePat, string patCond)
        {
            var historyIllIDParameter = historyIllID.HasValue ?
                new ObjectParameter("HistoryIllID", historyIllID) :
                new ObjectParameter("HistoryIllID", typeof(System.Guid));
    
            var illIDParameter = illID.HasValue ?
                new ObjectParameter("IllID", illID) :
                new ObjectParameter("IllID", typeof(System.Guid));
    
            var anIDParameter = anID.HasValue ?
                new ObjectParameter("AnID", anID) :
                new ObjectParameter("AnID", typeof(System.Guid));
    
            var anResParameter = anRes != null ?
                new ObjectParameter("AnRes", anRes) :
                new ObjectParameter("AnRes", typeof(string));
    
            var datePatParameter = datePat.HasValue ?
                new ObjectParameter("DatePat", datePat) :
                new ObjectParameter("DatePat", typeof(System.DateTime));
    
            var patCondParameter = patCond != null ?
                new ObjectParameter("PatCond", patCond) :
                new ObjectParameter("PatCond", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsHistoryillings", historyIllIDParameter, illIDParameter, anIDParameter, anResParameter, datePatParameter, patCondParameter);
        }
    
        public virtual int InsIllings(Nullable<System.Guid> illID, string illName, string sympt, Nullable<decimal> treatDisDur)
        {
            var illIDParameter = illID.HasValue ?
                new ObjectParameter("IllID", illID) :
                new ObjectParameter("IllID", typeof(System.Guid));
    
            var illNameParameter = illName != null ?
                new ObjectParameter("IllName", illName) :
                new ObjectParameter("IllName", typeof(string));
    
            var symptParameter = sympt != null ?
                new ObjectParameter("Sympt", sympt) :
                new ObjectParameter("Sympt", typeof(string));
    
            var treatDisDurParameter = treatDisDur.HasValue ?
                new ObjectParameter("TreatDisDur", treatDisDur) :
                new ObjectParameter("TreatDisDur", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsIllings", illIDParameter, illNameParameter, symptParameter, treatDisDurParameter);
        }
    
        public virtual int InsPatientCards(Nullable<System.Guid> patCardNum, Nullable<System.DateTime> cardCrtDate, string cardOwnerFIO, Nullable<System.Guid> hisIllID)
        {
            var patCardNumParameter = patCardNum.HasValue ?
                new ObjectParameter("PatCardNum", patCardNum) :
                new ObjectParameter("PatCardNum", typeof(System.Guid));
    
            var cardCrtDateParameter = cardCrtDate.HasValue ?
                new ObjectParameter("CardCrtDate", cardCrtDate) :
                new ObjectParameter("CardCrtDate", typeof(System.DateTime));
    
            var cardOwnerFIOParameter = cardOwnerFIO != null ?
                new ObjectParameter("CardOwnerFIO", cardOwnerFIO) :
                new ObjectParameter("CardOwnerFIO", typeof(string));
    
            var hisIllIDParameter = hisIllID.HasValue ?
                new ObjectParameter("HisIllID", hisIllID) :
                new ObjectParameter("HisIllID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsPatientCards", patCardNumParameter, cardCrtDateParameter, cardOwnerFIOParameter, hisIllIDParameter);
        }
    
        public virtual int InsPatients(Nullable<System.Guid> patID, Nullable<decimal> polID, Nullable<System.Guid> patCardNum)
        {
            var patIDParameter = patID.HasValue ?
                new ObjectParameter("PatID", patID) :
                new ObjectParameter("PatID", typeof(System.Guid));
    
            var polIDParameter = polID.HasValue ?
                new ObjectParameter("PolID", polID) :
                new ObjectParameter("PolID", typeof(decimal));
    
            var patCardNumParameter = patCardNum.HasValue ?
                new ObjectParameter("PatCardNum", patCardNum) :
                new ObjectParameter("PatCardNum", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsPatients", patIDParameter, polIDParameter, patCardNumParameter);
        }
    
        public virtual int InsPolicies(Nullable<decimal> polID, Nullable<System.Guid> agID, string patFullName, Nullable<System.DateTime> patBirthD, string patAddr, Nullable<System.DateTime> patIssueD, Nullable<System.DateTime> patExpD)
        {
            var polIDParameter = polID.HasValue ?
                new ObjectParameter("PolID", polID) :
                new ObjectParameter("PolID", typeof(decimal));
    
            var agIDParameter = agID.HasValue ?
                new ObjectParameter("AgID", agID) :
                new ObjectParameter("AgID", typeof(System.Guid));
    
            var patFullNameParameter = patFullName != null ?
                new ObjectParameter("PatFullName", patFullName) :
                new ObjectParameter("PatFullName", typeof(string));
    
            var patBirthDParameter = patBirthD.HasValue ?
                new ObjectParameter("PatBirthD", patBirthD) :
                new ObjectParameter("PatBirthD", typeof(System.DateTime));
    
            var patAddrParameter = patAddr != null ?
                new ObjectParameter("PatAddr", patAddr) :
                new ObjectParameter("PatAddr", typeof(string));
    
            var patIssueDParameter = patIssueD.HasValue ?
                new ObjectParameter("PatIssueD", patIssueD) :
                new ObjectParameter("PatIssueD", typeof(System.DateTime));
    
            var patExpDParameter = patExpD.HasValue ?
                new ObjectParameter("PatExpD", patExpD) :
                new ObjectParameter("PatExpD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsPolicies", polIDParameter, agIDParameter, patFullNameParameter, patBirthDParameter, patAddrParameter, patIssueDParameter, patExpDParameter);
        }
    
        public virtual int InsReceptions(Nullable<System.Guid> recID, string recType)
        {
            var recIDParameter = recID.HasValue ?
                new ObjectParameter("RecID", recID) :
                new ObjectParameter("RecID", typeof(System.Guid));
    
            var recTypeParameter = recType != null ?
                new ObjectParameter("RecType", recType) :
                new ObjectParameter("RecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsReceptions", recIDParameter, recTypeParameter);
        }
    
        public virtual int InsShifts(Nullable<System.Guid> shiftID, string shiftName, Nullable<System.TimeSpan> shiftTime)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            var shiftNameParameter = shiftName != null ?
                new ObjectParameter("ShiftName", shiftName) :
                new ObjectParameter("ShiftName", typeof(string));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsShifts", shiftIDParameter, shiftNameParameter, shiftTimeParameter);
        }
    
        public virtual int InsSpecifications(Nullable<System.Guid> specID, string specName)
        {
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(System.Guid));
    
            var specNameParameter = specName != null ?
                new ObjectParameter("SpecName", specName) :
                new ObjectParameter("SpecName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsSpecifications", specIDParameter, specNameParameter);
        }
    
        public virtual int InsVisits(Nullable<System.Guid> visitID, Nullable<System.Guid> patientID, Nullable<System.Guid> doctorID, Nullable<System.DateTime> receptionDateTime, Nullable<System.Guid> receptionID)
        {
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(System.Guid));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(System.Guid));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(System.Guid));
    
            var receptionDateTimeParameter = receptionDateTime.HasValue ?
                new ObjectParameter("ReceptionDateTime", receptionDateTime) :
                new ObjectParameter("ReceptionDateTime", typeof(System.DateTime));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsVisits", visitIDParameter, patientIDParameter, doctorIDParameter, receptionDateTimeParameter, receptionIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdAccShiftDuties(Nullable<System.Guid> accID, Nullable<System.Guid> shiftID, Nullable<bool> isDutyDoc)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            var isDutyDocParameter = isDutyDoc.HasValue ?
                new ObjectParameter("IsDutyDoc", isDutyDoc) :
                new ObjectParameter("IsDutyDoc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdAccShiftDuties", accIDParameter, shiftIDParameter, isDutyDocParameter);
        }
    
        public virtual int UpdAccWorks(Nullable<System.Guid> accID, Nullable<System.Guid> visitID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(System.Guid));
    
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdAccWorks", accIDParameter, visitIDParameter);
        }
    
        public virtual int UpdAgencies(string agName, Nullable<System.Guid> agID)
        {
            var agNameParameter = agName != null ?
                new ObjectParameter("AgName", agName) :
                new ObjectParameter("AgName", typeof(string));
    
            var agIDParameter = agID.HasValue ?
                new ObjectParameter("AgID", agID) :
                new ObjectParameter("AgID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdAgencies", agNameParameter, agIDParameter);
        }
    
        public virtual int UpdAnalyzes(Nullable<System.Guid> anID, string anType)
        {
            var anIDParameter = anID.HasValue ?
                new ObjectParameter("AnID", anID) :
                new ObjectParameter("AnID", typeof(System.Guid));
    
            var anTypeParameter = anType != null ?
                new ObjectParameter("AnType", anType) :
                new ObjectParameter("AnType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdAnalyzes", anIDParameter, anTypeParameter);
        }
    
        public virtual int UpdDocDischarge(Nullable<System.Guid> dischargeID, Nullable<System.Guid> patID, Nullable<System.Guid> drugID1, Nullable<System.Guid> drugID2, Nullable<System.Guid> drugID3)
        {
            var dischargeIDParameter = dischargeID.HasValue ?
                new ObjectParameter("DischargeID", dischargeID) :
                new ObjectParameter("DischargeID", typeof(System.Guid));
    
            var patIDParameter = patID.HasValue ?
                new ObjectParameter("PatID", patID) :
                new ObjectParameter("PatID", typeof(System.Guid));
    
            var drugID1Parameter = drugID1.HasValue ?
                new ObjectParameter("DrugID1", drugID1) :
                new ObjectParameter("DrugID1", typeof(System.Guid));
    
            var drugID2Parameter = drugID2.HasValue ?
                new ObjectParameter("DrugID2", drugID2) :
                new ObjectParameter("DrugID2", typeof(System.Guid));
    
            var drugID3Parameter = drugID3.HasValue ?
                new ObjectParameter("DrugID3", drugID3) :
                new ObjectParameter("DrugID3", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdDocDischarge", dischargeIDParameter, patIDParameter, drugID1Parameter, drugID2Parameter, drugID3Parameter);
        }
    
        public virtual int UpdDoctors(Nullable<System.Guid> docID, Nullable<System.Guid> specID, string docFullName, Nullable<decimal> age, Nullable<decimal> exp, Nullable<System.DateTime> birthD, Nullable<decimal> cost)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(System.Guid));
    
            var docFullNameParameter = docFullName != null ?
                new ObjectParameter("DocFullName", docFullName) :
                new ObjectParameter("DocFullName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(decimal));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("Exp", exp) :
                new ObjectParameter("Exp", typeof(decimal));
    
            var birthDParameter = birthD.HasValue ?
                new ObjectParameter("BirthD", birthD) :
                new ObjectParameter("BirthD", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdDoctors", docIDParameter, specIDParameter, docFullNameParameter, ageParameter, expParameter, birthDParameter, costParameter);
        }
    
        public virtual int UpdDrugProviders(Nullable<System.Guid> drugProviderID, string providerName, string providerCountry)
        {
            var drugProviderIDParameter = drugProviderID.HasValue ?
                new ObjectParameter("DrugProviderID", drugProviderID) :
                new ObjectParameter("DrugProviderID", typeof(System.Guid));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerCountryParameter = providerCountry != null ?
                new ObjectParameter("ProviderCountry", providerCountry) :
                new ObjectParameter("ProviderCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdDrugProviders", drugProviderIDParameter, providerNameParameter, providerCountryParameter);
        }
    
        public virtual int UpdDrugs(Nullable<System.Guid> drugID, Nullable<System.Guid> drugProviderID, string drugName, string drugPurpose, Nullable<bool> isPreAllowed)
        {
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(System.Guid));
    
            var drugProviderIDParameter = drugProviderID.HasValue ?
                new ObjectParameter("DrugProviderID", drugProviderID) :
                new ObjectParameter("DrugProviderID", typeof(System.Guid));
    
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var drugPurposeParameter = drugPurpose != null ?
                new ObjectParameter("DrugPurpose", drugPurpose) :
                new ObjectParameter("DrugPurpose", typeof(string));
    
            var isPreAllowedParameter = isPreAllowed.HasValue ?
                new ObjectParameter("IsPreAllowed", isPreAllowed) :
                new ObjectParameter("IsPreAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdDrugs", drugIDParameter, drugProviderIDParameter, drugNameParameter, drugPurposeParameter, isPreAllowedParameter);
        }
    
        public virtual int UpdHistoryillings(Nullable<System.Guid> historyIllID, Nullable<System.Guid> illID, Nullable<System.Guid> anID, string anRes, Nullable<System.DateTime> datePat, string patCond)
        {
            var historyIllIDParameter = historyIllID.HasValue ?
                new ObjectParameter("HistoryIllID", historyIllID) :
                new ObjectParameter("HistoryIllID", typeof(System.Guid));
    
            var illIDParameter = illID.HasValue ?
                new ObjectParameter("IllID", illID) :
                new ObjectParameter("IllID", typeof(System.Guid));
    
            var anIDParameter = anID.HasValue ?
                new ObjectParameter("AnID", anID) :
                new ObjectParameter("AnID", typeof(System.Guid));
    
            var anResParameter = anRes != null ?
                new ObjectParameter("AnRes", anRes) :
                new ObjectParameter("AnRes", typeof(string));
    
            var datePatParameter = datePat.HasValue ?
                new ObjectParameter("DatePat", datePat) :
                new ObjectParameter("DatePat", typeof(System.DateTime));
    
            var patCondParameter = patCond != null ?
                new ObjectParameter("PatCond", patCond) :
                new ObjectParameter("PatCond", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdHistoryillings", historyIllIDParameter, illIDParameter, anIDParameter, anResParameter, datePatParameter, patCondParameter);
        }
    
        public virtual int UpdIllings(Nullable<System.Guid> illID, string illName, string sympt, Nullable<decimal> treatDisDur)
        {
            var illIDParameter = illID.HasValue ?
                new ObjectParameter("IllID", illID) :
                new ObjectParameter("IllID", typeof(System.Guid));
    
            var illNameParameter = illName != null ?
                new ObjectParameter("IllName", illName) :
                new ObjectParameter("IllName", typeof(string));
    
            var symptParameter = sympt != null ?
                new ObjectParameter("Sympt", sympt) :
                new ObjectParameter("Sympt", typeof(string));
    
            var treatDisDurParameter = treatDisDur.HasValue ?
                new ObjectParameter("TreatDisDur", treatDisDur) :
                new ObjectParameter("TreatDisDur", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdIllings", illIDParameter, illNameParameter, symptParameter, treatDisDurParameter);
        }
    
        public virtual int UpdPatientCards(Nullable<System.Guid> patCardNum, Nullable<System.DateTime> cardCrtDate, string cardOwnerFIO, Nullable<System.Guid> hisIllID)
        {
            var patCardNumParameter = patCardNum.HasValue ?
                new ObjectParameter("PatCardNum", patCardNum) :
                new ObjectParameter("PatCardNum", typeof(System.Guid));
    
            var cardCrtDateParameter = cardCrtDate.HasValue ?
                new ObjectParameter("CardCrtDate", cardCrtDate) :
                new ObjectParameter("CardCrtDate", typeof(System.DateTime));
    
            var cardOwnerFIOParameter = cardOwnerFIO != null ?
                new ObjectParameter("CardOwnerFIO", cardOwnerFIO) :
                new ObjectParameter("CardOwnerFIO", typeof(string));
    
            var hisIllIDParameter = hisIllID.HasValue ?
                new ObjectParameter("HisIllID", hisIllID) :
                new ObjectParameter("HisIllID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdPatientCards", patCardNumParameter, cardCrtDateParameter, cardOwnerFIOParameter, hisIllIDParameter);
        }
    
        public virtual int UpdPatients(Nullable<System.Guid> patID, Nullable<decimal> polID, Nullable<System.Guid> patCardNum)
        {
            var patIDParameter = patID.HasValue ?
                new ObjectParameter("PatID", patID) :
                new ObjectParameter("PatID", typeof(System.Guid));
    
            var polIDParameter = polID.HasValue ?
                new ObjectParameter("PolID", polID) :
                new ObjectParameter("PolID", typeof(decimal));
    
            var patCardNumParameter = patCardNum.HasValue ?
                new ObjectParameter("PatCardNum", patCardNum) :
                new ObjectParameter("PatCardNum", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdPatients", patIDParameter, polIDParameter, patCardNumParameter);
        }
    
        public virtual int UpdPolicies(Nullable<decimal> polID, Nullable<System.Guid> agID, string patFullName, Nullable<System.DateTime> patBirthD, string patAddr, Nullable<System.DateTime> patIssueD, Nullable<System.DateTime> patExpD)
        {
            var polIDParameter = polID.HasValue ?
                new ObjectParameter("PolID", polID) :
                new ObjectParameter("PolID", typeof(decimal));
    
            var agIDParameter = agID.HasValue ?
                new ObjectParameter("AgID", agID) :
                new ObjectParameter("AgID", typeof(System.Guid));
    
            var patFullNameParameter = patFullName != null ?
                new ObjectParameter("PatFullName", patFullName) :
                new ObjectParameter("PatFullName", typeof(string));
    
            var patBirthDParameter = patBirthD.HasValue ?
                new ObjectParameter("PatBirthD", patBirthD) :
                new ObjectParameter("PatBirthD", typeof(System.DateTime));
    
            var patAddrParameter = patAddr != null ?
                new ObjectParameter("PatAddr", patAddr) :
                new ObjectParameter("PatAddr", typeof(string));
    
            var patIssueDParameter = patIssueD.HasValue ?
                new ObjectParameter("PatIssueD", patIssueD) :
                new ObjectParameter("PatIssueD", typeof(System.DateTime));
    
            var patExpDParameter = patExpD.HasValue ?
                new ObjectParameter("PatExpD", patExpD) :
                new ObjectParameter("PatExpD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdPolicies", polIDParameter, agIDParameter, patFullNameParameter, patBirthDParameter, patAddrParameter, patIssueDParameter, patExpDParameter);
        }
    
        public virtual int UpdReceptions(Nullable<System.Guid> recID, string recType)
        {
            var recIDParameter = recID.HasValue ?
                new ObjectParameter("RecID", recID) :
                new ObjectParameter("RecID", typeof(System.Guid));
    
            var recTypeParameter = recType != null ?
                new ObjectParameter("RecType", recType) :
                new ObjectParameter("RecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdReceptions", recIDParameter, recTypeParameter);
        }
    
        public virtual int UpdShifts(Nullable<System.Guid> shiftID, string shiftName, Nullable<System.TimeSpan> shiftTime)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(System.Guid));
    
            var shiftNameParameter = shiftName != null ?
                new ObjectParameter("ShiftName", shiftName) :
                new ObjectParameter("ShiftName", typeof(string));
    
            var shiftTimeParameter = shiftTime.HasValue ?
                new ObjectParameter("ShiftTime", shiftTime) :
                new ObjectParameter("ShiftTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdShifts", shiftIDParameter, shiftNameParameter, shiftTimeParameter);
        }
    
        public virtual int UpdSpecifications(Nullable<System.Guid> specID, string specName)
        {
            var specIDParameter = specID.HasValue ?
                new ObjectParameter("SpecID", specID) :
                new ObjectParameter("SpecID", typeof(System.Guid));
    
            var specNameParameter = specName != null ?
                new ObjectParameter("SpecName", specName) :
                new ObjectParameter("SpecName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdSpecifications", specIDParameter, specNameParameter);
        }
    
        public virtual int UpdVisits(Nullable<System.Guid> visitID, Nullable<System.Guid> patientID, Nullable<System.Guid> doctorID, Nullable<System.DateTime> receptionDateTime, Nullable<System.Guid> receptionID)
        {
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(System.Guid));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(System.Guid));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(System.Guid));
    
            var receptionDateTimeParameter = receptionDateTime.HasValue ?
                new ObjectParameter("ReceptionDateTime", receptionDateTime) :
                new ObjectParameter("ReceptionDateTime", typeof(System.DateTime));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdVisits", visitIDParameter, patientIDParameter, doctorIDParameter, receptionDateTimeParameter, receptionIDParameter);
        }
    }
}
